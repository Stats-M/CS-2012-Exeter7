using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Exeter7
{
    /// <summary>
    /// Интерфейс, который должны поддерживать все классы среднего и нижнего звена иерархии, 
    /// производящие чтение и сохранение данных в поток в двоичном виде. Такие классы не принимают 
    /// самостоятельного решения о необходимости выполнения операций ввода-вывода.
    /// </summary>
    interface IBinaryDataProvider
    {
        /// <summary>
        /// Свойство, отражающее текущую версию кода класса. Со временем, число членов класса может 
        /// увеличиться, что будет влиять на совместимость при проведении двоичных операций 
        /// ввода-вывода. Знание версии класса поможет применить нужные методы конверсии.
        /// </summary>
        int VersionCode
        {
            get;
        }

        /// <summary>
        /// Свойство, отражающее текущую версию ДАННЫХ, хранящихся в полях класса (какой версией класса 
        /// была произведена запись этих данных). Новая версия класса может 
        /// загружать из файла данные любой более старой версии. Необходимо запомнить версию набора данных, 
        /// чтобы применять правильную конверсионную последовательность. Альтернативно можно проводить 
        /// автоматическую конвертацию старых данных в новый формат, с соответствующим изменением версии 
        /// данных и последующей записьюю этих данных в каталог.
        /// </summary>
        int VersionData
        {
            get;
            set;
        }

        /// <summary>
        /// Метод, загружающий данные класса из двоичного потока. Метод считывает версию модели данных 
        /// из файла и применяет соответствующую процедуру конверсии при необходимости.
        /// </summary>
        /// <param name="bReader">Ссылка на двоичный поток - reader</param>
        void Load(BinaryReader bReader);

        /// <summary>
        /// Метод, производящий запись в двоичный поток всех данных класса. ВНИМАНИЕ! Запись производится 
        /// в соответствии с версией ДАННЫХ!!! Иначе может возникнуть ситуация, что на место данных старой версии 
        /// будут записаны данные в новой версии, большие по объему. Если такая запись производится в середину файла, 
        /// файл может быть безвозвратно испорчен.
        /// </summary>
        /// <remarks>Классы, реализующие данный метод, не должны самостоятельно выполнять конверсию данных до 
        /// версии кода, т.к. эти классы находятся внизу иерархии и не в курсе ситуации. Они должны просто выполнить 
        /// команду на сохранение данных с учетом версии данных. Учетом разниц версий и вопросами проведения 
        /// конверсий занимаются вышестоящие классы, которые данный интерфес не реализуют.</remarks>
        /// <param name="bWriter">Ссылка на двоичный поток - writer</param>
        void Save(BinaryWriter bWriter);
    }
}
